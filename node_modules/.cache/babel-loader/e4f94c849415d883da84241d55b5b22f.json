{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar time_estimates;\ntime_estimates = {\n  estimate_attack_times: function estimate_attack_times(guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function guesses_to_score(guesses) {\n    var DELTA;\n    DELTA = 5;\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function display_time(seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n    if (display_num != null && display_num !== 1) {\n      display_str += 's';\n    }\n    return display_str;\n  }\n};\nmodule.exports = time_estimates;","map":{"version":3,"mappings":";AAAA;AAAAA,iBACE;EAAAC,uBAAuB,+BAACC,OAAD;IACrB;IAAAC,sBACE;MAAAC,gCAAgCF,WAAW,MAAM,IAAP,CAA1C;MACAG,oCAAoCH,UAAU,EAD9C;MAEAI,qCAAqCJ,UAAU,GAF/C;MAGAK,sCAAsCL,UAAU;;IAElDM,sBAAsB;IACtB;;MACEA,mBAAoB,UAApB,GAAgC,IAAC,aAAD,CAAcC,OAAd;IADlC;WAGA;MAAAN,qBAAqBA,mBAArB;MACAK,qBAAqBA,mBADrB;MAEAE,OAAO,IAAC,iBAAD,CAAkBR,OAAlB;;EAbc,CAAvB;EAgBAS,kBAAkB,0BAACT,OAAD;IAChB;IAAAU,QAAQ;IACR,IAAGV,UAAU,MAAMU,KAAnB;aAEE;KAFF,MAGK,IAAGV,UAAU,MAAMU,KAAnB;aAEH;KAFG,MAGA,IAAGV,UAAU,MAAMU,KAAnB;aAEH;KAFG,MAGA,IAAGV,UAAU,OAAOU,KAApB;aAGH;KAHG;aAMH;;EAjBc,CAhBlB;EAmCAC,cAAc,sBAACJ,OAAD;IACZ;IAAAK,SAAS;IACTC,OAAOD,SAAS;IAChBE,MAAMD,OAAO;IACbE,QAAQD,MAAM;IACdE,OAAOD,QAAQ;IACfE,UAAUD,OAAO;IACjBE,MAAgCX,UAAU,CAAb,GAC3B,CAAC,IAAD,EAAO,oBAAP,CAD2B,GAErBA,UAAUK,MAAb,IACHO,OAAOC,IAAI,CAACC,KAAL,CAAWd,OAAX,CAAP,EACA,CAACY,IAAD,EAAUA,IAAD,GAAM,SAAf,CADA,IAEMZ,UAAUM,IAAb,IACHM,OAAOC,IAAI,CAACC,KAAL,CAAWd,UAAUK,MAArB,CAAP,EACA,CAACO,IAAD,EAAUA,IAAD,GAAM,SAAf,CADA,IAEMZ,UAAUO,GAAb,IACHK,OAAOC,IAAI,CAACC,KAAL,CAAWd,UAAUM,IAArB,CAAP,EACA,CAACM,IAAD,EAAUA,IAAD,GAAM,OAAf,CADA,IAEMZ,UAAUQ,KAAb,IACHI,OAAOC,IAAI,CAACC,KAAL,CAAWd,UAAUO,GAArB,CAAP,EACA,CAACK,IAAD,EAAUA,IAAD,GAAM,MAAf,CADA,IAEMZ,UAAUS,IAAb,IACHG,OAAOC,IAAI,CAACC,KAAL,CAAWd,UAAUQ,KAArB,CAAP,EACA,CAACI,IAAD,EAAUA,IAAD,GAAM,QAAf,CADA,IAEMZ,UAAUU,OAAb,IACHE,OAAOC,IAAI,CAACC,KAAL,CAAWd,UAAUS,IAArB,CAAP,EACA,CAACG,IAAD,EAAUA,IAAD,GAAM,OAAf,CADA,IAGA,CAAC,IAAD,EAAO,WAAP,CArBF,EAACG,oBAAD,EAAcC;IAsBd,IAAsBD,uBAAiBA,gBAAe,CAAtD;MAAAC,eAAe;;WACfA;EA9BY;;AAgChBC,MAAM,CAACC,OAAP,GAAiB3B","names":["time_estimates","estimate_attack_times","guesses","crack_times_seconds","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","crack_times_display","seconds","score","guesses_to_score","DELTA","display_time","minute","hour","day","month","year","century","ref","base","Math","round","display_num","display_str","module","exports"],"sourceRoot":"..","sources":["src/time_estimates.coffee"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}