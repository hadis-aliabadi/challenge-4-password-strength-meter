{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, GRAPHS, L33T_TABLE, RANKED_DICTIONARIES, REGEXEN, adjacency_graphs, build_ranked_dict, frequency_lists, lst, matching, name, scoring;\nfrequency_lists = require('./frequency_lists');\nadjacency_graphs = require('./adjacency_graphs');\nscoring = require('./scoring');\nbuild_ranked_dict = function build_ranked_dict(ordered_list) {\n  var i, len1, o, result, word;\n  result = {};\n  i = 1;\n  for (o = 0, len1 = ordered_list.length; o < len1; o++) {\n    word = ordered_list[o];\n    result[word] = i;\n    i += 1;\n  }\n  return result;\n};\nRANKED_DICTIONARIES = {};\nfor (name in frequency_lists) {\n  lst = frequency_lists[name];\n  RANKED_DICTIONARIES[name] = build_ranked_dict(lst);\n}\nGRAPHS = {\n  qwerty: adjacency_graphs.qwerty,\n  dvorak: adjacency_graphs.dvorak,\n  keypad: adjacency_graphs.keypad,\n  mac_keypad: adjacency_graphs.mac_keypad\n};\nL33T_TABLE = {\n  a: ['4', '@'],\n  b: ['8'],\n  c: ['(', '{', '[', '<'],\n  e: ['3'],\n  g: ['6', '9'],\n  i: ['1', '!', '|'],\n  l: ['1', '|', '7'],\n  o: ['0'],\n  s: ['$', '5'],\n  t: ['+', '7'],\n  x: ['%'],\n  z: ['2']\n};\nREGEXEN = {\n  recent_year: /19\\d\\d|200\\d|201\\d/g\n};\nDATE_MAX_YEAR = 2050;\nDATE_MIN_YEAR = 1000;\nDATE_SPLITS = {\n  4: [[1, 2], [2, 3]],\n  5: [[1, 3], [2, 3]],\n  6: [[1, 2], [2, 4], [4, 5]],\n  7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n  8: [[2, 4], [4, 6]]\n};\nmatching = {\n  empty: function empty(obj) {\n    var k;\n    return function () {\n      var results;\n      results = [];\n      for (k in obj) {\n        results.push(k);\n      }\n      return results;\n    }().length === 0;\n  },\n  extend: function extend(lst, lst2) {\n    return lst.push.apply(lst, lst2);\n  },\n  translate: function translate(string, chr_map) {\n    var chr;\n    return function () {\n      var len1, o, ref, results;\n      ref = string.split('');\n      results = [];\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        chr = ref[o];\n        results.push(chr_map[chr] || chr);\n      }\n      return results;\n    }().join('');\n  },\n  mod: function mod(n, m) {\n    return (n % m + m) % m;\n  },\n  sorted: function sorted(matches) {\n    return matches.sort(function (m1, m2) {\n      return m1.i - m2.i || m1.j - m2.j;\n    });\n  },\n  omnimatch: function omnimatch(password) {\n    var len1, matcher, matchers, matches, o;\n    matches = [];\n    matchers = [this.dictionary_match, this.reverse_dictionary_match, this.l33t_match, this.spatial_match, this.repeat_match, this.sequence_match, this.regex_match, this.date_match];\n    for (o = 0, len1 = matchers.length; o < len1; o++) {\n      matcher = matchers[o];\n      this.extend(matches, matcher.call(this, password));\n    }\n    return this.sorted(matches);\n  },\n  dictionary_match: function dictionary_match(password, _ranked_dictionaries) {\n    var dictionary_name, i, j, len, matches, o, p, password_lower, rank, ranked_dict, ref, ref1, ref2, word;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    matches = [];\n    len = password.length;\n    password_lower = password.toLowerCase();\n    for (dictionary_name in _ranked_dictionaries) {\n      ranked_dict = _ranked_dictionaries[dictionary_name];\n      for (i = o = 0, ref = len; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        for (j = p = ref1 = i, ref2 = len; ref1 <= ref2 ? p < ref2 : p > ref2; j = ref1 <= ref2 ? ++p : --p) {\n          if (password_lower.slice(i, +j + 1 || 9e9) in ranked_dict) {\n            word = password_lower.slice(i, +j + 1 || 9e9);\n            rank = ranked_dict[word];\n            matches.push({\n              pattern: 'dictionary',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              matched_word: word,\n              rank: rank,\n              dictionary_name: dictionary_name,\n              reversed: false,\n              l33t: false\n            });\n          }\n        }\n      }\n    }\n    return this.sorted(matches);\n  },\n  reverse_dictionary_match: function reverse_dictionary_match(password, _ranked_dictionaries) {\n    var len1, match, matches, o, ref, reversed_password;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    reversed_password = password.split('').reverse().join('');\n    matches = this.dictionary_match(reversed_password, _ranked_dictionaries);\n    for (o = 0, len1 = matches.length; o < len1; o++) {\n      match = matches[o];\n      match.token = match.token.split('').reverse().join('');\n      match.reversed = true;\n      ref = [password.length - 1 - match.j, password.length - 1 - match.i], match.i = ref[0], match.j = ref[1];\n    }\n    return this.sorted(matches);\n  },\n  set_user_input_dictionary: function set_user_input_dictionary(ordered_list) {\n    return RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict(ordered_list.slice());\n  },\n  relevant_l33t_subtable: function relevant_l33t_subtable(password, table) {\n    var chr, len1, letter, o, password_chars, ref, relevant_subs, sub, subs, subtable;\n    password_chars = {};\n    ref = password.split('');\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      chr = ref[o];\n      password_chars[chr] = true;\n    }\n    subtable = {};\n    for (letter in table) {\n      subs = table[letter];\n      relevant_subs = function () {\n        var len2, p, results;\n        results = [];\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          if (sub in password_chars) {\n            results.push(sub);\n          }\n        }\n        return results;\n      }();\n      if (relevant_subs.length > 0) {\n        subtable[letter] = relevant_subs;\n      }\n    }\n    return subtable;\n  },\n  enumerate_l33t_subs: function enumerate_l33t_subs(table) {\n    var chr, dedup, _helper, k, keys, l33t_chr, len1, len2, o, p, ref, sub, sub_dict, sub_dicts, subs;\n    keys = function () {\n      var results;\n      results = [];\n      for (k in table) {\n        results.push(k);\n      }\n      return results;\n    }();\n    subs = [[]];\n    dedup = function dedup(subs) {\n      var assoc, deduped, label, len1, members, o, sub, v;\n      deduped = [];\n      members = {};\n      for (o = 0, len1 = subs.length; o < len1; o++) {\n        sub = subs[o];\n        assoc = function () {\n          var len2, p, results;\n          results = [];\n          for (v = p = 0, len2 = sub.length; p < len2; v = ++p) {\n            k = sub[v];\n            results.push([k, v]);\n          }\n          return results;\n        }();\n        assoc.sort();\n        label = function () {\n          var len2, p, results;\n          results = [];\n          for (v = p = 0, len2 = assoc.length; p < len2; v = ++p) {\n            k = assoc[v];\n            results.push(k + ',' + v);\n          }\n          return results;\n        }().join('-');\n        if (!(label in members)) {\n          members[label] = true;\n          deduped.push(sub);\n        }\n      }\n      return deduped;\n    };\n    _helper = function helper(keys) {\n      var dup_l33t_index, first_key, i, l33t_chr, len1, len2, next_subs, o, p, q, ref, ref1, rest_keys, sub, sub_alternative, sub_extension;\n      if (!keys.length) {\n        return;\n      }\n      first_key = keys[0];\n      rest_keys = keys.slice(1);\n      next_subs = [];\n      ref = table[first_key];\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        l33t_chr = ref[o];\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          dup_l33t_index = -1;\n          for (i = q = 0, ref1 = sub.length; 0 <= ref1 ? q < ref1 : q > ref1; i = 0 <= ref1 ? ++q : --q) {\n            if (sub[i][0] === l33t_chr) {\n              dup_l33t_index = i;\n              break;\n            }\n          }\n          if (dup_l33t_index === -1) {\n            sub_extension = sub.concat([[l33t_chr, first_key]]);\n            next_subs.push(sub_extension);\n          } else {\n            sub_alternative = sub.slice(0);\n            sub_alternative.splice(dup_l33t_index, 1);\n            sub_alternative.push([l33t_chr, first_key]);\n            next_subs.push(sub);\n            next_subs.push(sub_alternative);\n          }\n        }\n      }\n      subs = dedup(next_subs);\n      return _helper(rest_keys);\n    };\n    _helper(keys);\n    sub_dicts = [];\n    for (o = 0, len1 = subs.length; o < len1; o++) {\n      sub = subs[o];\n      sub_dict = {};\n      for (p = 0, len2 = sub.length; p < len2; p++) {\n        ref = sub[p], l33t_chr = ref[0], chr = ref[1];\n        sub_dict[l33t_chr] = chr;\n      }\n      sub_dicts.push(sub_dict);\n    }\n    return sub_dicts;\n  },\n  l33t_match: function l33t_match(password, _ranked_dictionaries, _l33t_table) {\n    var chr, k, len1, len2, match, match_sub, matches, o, p, ref, ref1, sub, subbed_chr, subbed_password, token, v;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    if (_l33t_table == null) {\n      _l33t_table = L33T_TABLE;\n    }\n    matches = [];\n    ref = this.enumerate_l33t_subs(this.relevant_l33t_subtable(password, _l33t_table));\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      sub = ref[o];\n      if (this.empty(sub)) {\n        break;\n      }\n      subbed_password = this.translate(password, sub);\n      ref1 = this.dictionary_match(subbed_password, _ranked_dictionaries);\n      for (p = 0, len2 = ref1.length; p < len2; p++) {\n        match = ref1[p];\n        token = password.slice(match.i, +match.j + 1 || 9e9);\n        if (token.toLowerCase() === match.matched_word) {\n          continue;\n        }\n        match_sub = {};\n        for (subbed_chr in sub) {\n          chr = sub[subbed_chr];\n          if (token.indexOf(subbed_chr) !== -1) {\n            match_sub[subbed_chr] = chr;\n          }\n        }\n        match.l33t = true;\n        match.token = token;\n        match.sub = match_sub;\n        match.sub_display = function () {\n          var results;\n          results = [];\n          for (k in match_sub) {\n            v = match_sub[k];\n            results.push(k + \" -> \" + v);\n          }\n          return results;\n        }().join(', ');\n        matches.push(match);\n      }\n    }\n    return this.sorted(matches.filter(function (match) {\n      return match.token.length > 1;\n    }));\n  },\n  spatial_match: function spatial_match(password, _graphs) {\n    var graph, graph_name, matches;\n    if (_graphs == null) {\n      _graphs = GRAPHS;\n    }\n    matches = [];\n    for (graph_name in _graphs) {\n      graph = _graphs[graph_name];\n      this.extend(matches, this.spatial_match_helper(password, graph, graph_name));\n    }\n    return this.sorted(matches);\n  },\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/,\n  spatial_match_helper: function spatial_match_helper(password, graph, graph_name) {\n    var adj, adjacents, cur_char, cur_direction, found, found_direction, i, j, last_direction, len1, matches, o, prev_char, shifted_count, turns;\n    matches = [];\n    i = 0;\n    while (i < password.length - 1) {\n      j = i + 1;\n      last_direction = null;\n      turns = 0;\n      if ((graph_name === 'qwerty' || graph_name === 'dvorak') && this.SHIFTED_RX.exec(password.charAt(i))) {\n        shifted_count = 1;\n      } else {\n        shifted_count = 0;\n      }\n      while (true) {\n        prev_char = password.charAt(j - 1);\n        found = false;\n        found_direction = -1;\n        cur_direction = -1;\n        adjacents = graph[prev_char] || [];\n        if (j < password.length) {\n          cur_char = password.charAt(j);\n          for (o = 0, len1 = adjacents.length; o < len1; o++) {\n            adj = adjacents[o];\n            cur_direction += 1;\n            if (adj && adj.indexOf(cur_char) !== -1) {\n              found = true;\n              found_direction = cur_direction;\n              if (adj.indexOf(cur_char) === 1) {\n                shifted_count += 1;\n              }\n              if (last_direction !== found_direction) {\n                turns += 1;\n                last_direction = found_direction;\n              }\n              break;\n            }\n          }\n        }\n        if (found) {\n          j += 1;\n        } else {\n          if (j - i > 2) {\n            matches.push({\n              pattern: 'spatial',\n              i: i,\n              j: j - 1,\n              token: password.slice(i, j),\n              graph: graph_name,\n              turns: turns,\n              shifted_count: shifted_count\n            });\n          }\n          i = j;\n          break;\n        }\n      }\n    }\n    return matches;\n  },\n  repeat_match: function repeat_match(password) {\n    var base_analysis, base_guesses, base_matches, base_token, greedy, greedy_match, i, j, lastIndex, lazy, lazy_anchored, lazy_match, match, matches, ref;\n    matches = [];\n    greedy = /(.+)\\1+/g;\n    lazy = /(.+?)\\1+/g;\n    lazy_anchored = /^(.+?)\\1+$/;\n    lastIndex = 0;\n    while (lastIndex < password.length) {\n      greedy.lastIndex = lazy.lastIndex = lastIndex;\n      greedy_match = greedy.exec(password);\n      lazy_match = lazy.exec(password);\n      if (greedy_match == null) {\n        break;\n      }\n      if (greedy_match[0].length > lazy_match[0].length) {\n        match = greedy_match;\n        base_token = lazy_anchored.exec(match[0])[1];\n      } else {\n        match = lazy_match;\n        base_token = match[1];\n      }\n      ref = [match.index, match.index + match[0].length - 1], i = ref[0], j = ref[1];\n      base_analysis = scoring.most_guessable_match_sequence(base_token, this.omnimatch(base_token));\n      base_matches = base_analysis.sequence;\n      base_guesses = base_analysis.guesses;\n      matches.push({\n        pattern: 'repeat',\n        i: i,\n        j: j,\n        token: match[0],\n        base_token: base_token,\n        base_guesses: base_guesses,\n        base_matches: base_matches,\n        repeat_count: match[0].length / base_token.length\n      });\n      lastIndex = j + 1;\n    }\n    return matches;\n  },\n  MAX_DELTA: 5,\n  sequence_match: function sequence_match(password) {\n    var delta, i, j, k, last_delta, o, ref, result, update;\n    if (password.length === 1) {\n      return [];\n    }\n    update = function (_this) {\n      return function (i, j, delta) {\n        var ref, sequence_name, sequence_space, token;\n        if (j - i > 1 || Math.abs(delta) === 1) {\n          if (0 < (ref = Math.abs(delta)) && ref <= _this.MAX_DELTA) {\n            token = password.slice(i, +j + 1 || 9e9);\n            if (/^[a-z]+$/.test(token)) {\n              sequence_name = 'lower';\n              sequence_space = 26;\n            } else if (/^[A-Z]+$/.test(token)) {\n              sequence_name = 'upper';\n              sequence_space = 26;\n            } else if (/^\\d+$/.test(token)) {\n              sequence_name = 'digits';\n              sequence_space = 10;\n            } else {\n              sequence_name = 'unicode';\n              sequence_space = 26;\n            }\n            return result.push({\n              pattern: 'sequence',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              sequence_name: sequence_name,\n              sequence_space: sequence_space,\n              ascending: delta > 0\n            });\n          }\n        }\n      };\n    }(this);\n    result = [];\n    i = 0;\n    last_delta = null;\n    for (k = o = 1, ref = password.length; 1 <= ref ? o < ref : o > ref; k = 1 <= ref ? ++o : --o) {\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n      if (last_delta == null) {\n        last_delta = delta;\n      }\n      if (delta === last_delta) {\n        continue;\n      }\n      j = k - 1;\n      update(i, j, last_delta);\n      i = j;\n      last_delta = delta;\n    }\n    update(i, password.length - 1, last_delta);\n    return result;\n  },\n  regex_match: function regex_match(password, _regexen) {\n    var matches, regex, rx_match, token;\n    if (_regexen == null) {\n      _regexen = REGEXEN;\n    }\n    matches = [];\n    for (name in _regexen) {\n      regex = _regexen[name];\n      regex.lastIndex = 0;\n      while (rx_match = regex.exec(password)) {\n        token = rx_match[0];\n        matches.push({\n          pattern: 'regex',\n          token: token,\n          i: rx_match.index,\n          j: rx_match.index + rx_match[0].length - 1,\n          regex_name: name,\n          regex_match: rx_match\n        });\n      }\n    }\n    return this.sorted(matches);\n  },\n  date_match: function date_match(password) {\n    var best_candidate, candidate, candidates, distance, dmy, i, j, k, l, len1, len2, matches, maybe_date_no_separator, maybe_date_with_separator, metric, min_distance, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rx_match, s, t, token;\n    matches = [];\n    maybe_date_no_separator = /^\\d{4,8}$/;\n    maybe_date_with_separator = /^(\\d{1,4})([\\s\\/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n    for (i = o = 0, ref = password.length - 4; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n      for (j = p = ref1 = i + 3, ref2 = i + 7; ref1 <= ref2 ? p <= ref2 : p >= ref2; j = ref1 <= ref2 ? ++p : --p) {\n        if (j >= password.length) {\n          break;\n        }\n        token = password.slice(i, +j + 1 || 9e9);\n        if (!maybe_date_no_separator.exec(token)) {\n          continue;\n        }\n        candidates = [];\n        ref3 = DATE_SPLITS[token.length];\n        for (q = 0, len1 = ref3.length; q < len1; q++) {\n          ref4 = ref3[q], k = ref4[0], l = ref4[1];\n          dmy = this.map_ints_to_dmy([parseInt(token.slice(0, k)), parseInt(token.slice(k, l)), parseInt(token.slice(l))]);\n          if (dmy != null) {\n            candidates.push(dmy);\n          }\n        }\n        if (!(candidates.length > 0)) {\n          continue;\n        }\n        best_candidate = candidates[0];\n        metric = function metric(candidate) {\n          return Math.abs(candidate.year - scoring.REFERENCE_YEAR);\n        };\n        min_distance = metric(candidates[0]);\n        ref5 = candidates.slice(1);\n        for (r = 0, len2 = ref5.length; r < len2; r++) {\n          candidate = ref5[r];\n          distance = metric(candidate);\n          if (distance < min_distance) {\n            ref6 = [candidate, distance], best_candidate = ref6[0], min_distance = ref6[1];\n          }\n        }\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: '',\n          year: best_candidate.year,\n          month: best_candidate.month,\n          day: best_candidate.day\n        });\n      }\n    }\n    for (i = s = 0, ref7 = password.length - 6; 0 <= ref7 ? s <= ref7 : s >= ref7; i = 0 <= ref7 ? ++s : --s) {\n      for (j = t = ref8 = i + 5, ref9 = i + 9; ref8 <= ref9 ? t <= ref9 : t >= ref9; j = ref8 <= ref9 ? ++t : --t) {\n        if (j >= password.length) {\n          break;\n        }\n        token = password.slice(i, +j + 1 || 9e9);\n        rx_match = maybe_date_with_separator.exec(token);\n        if (rx_match == null) {\n          continue;\n        }\n        dmy = this.map_ints_to_dmy([parseInt(rx_match[1]), parseInt(rx_match[3]), parseInt(rx_match[4])]);\n        if (dmy == null) {\n          continue;\n        }\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: rx_match[2],\n          year: dmy.year,\n          month: dmy.month,\n          day: dmy.day\n        });\n      }\n    }\n    return this.sorted(matches.filter(function (match) {\n      var is_submatch, len3, other_match, u;\n      is_submatch = false;\n      for (u = 0, len3 = matches.length; u < len3; u++) {\n        other_match = matches[u];\n        if (match === other_match) {\n          continue;\n        }\n        if (other_match.i <= match.i && other_match.j >= match.j) {\n          is_submatch = true;\n          break;\n        }\n      }\n      return !is_submatch;\n    }));\n  },\n  map_ints_to_dmy: function map_ints_to_dmy(ints) {\n    var dm, int, len1, len2, len3, o, over_12, over_31, p, possible_year_splits, q, ref, ref1, rest, under_1, y;\n    if (ints[1] > 31 || ints[1] <= 0) {\n      return;\n    }\n    over_12 = 0;\n    over_31 = 0;\n    under_1 = 0;\n    for (o = 0, len1 = ints.length; o < len1; o++) {\n      int = ints[o];\n      if (99 < int && int < DATE_MIN_YEAR || int > DATE_MAX_YEAR) {\n        return;\n      }\n      if (int > 31) {\n        over_31 += 1;\n      }\n      if (int > 12) {\n        over_12 += 1;\n      }\n      if (int <= 0) {\n        under_1 += 1;\n      }\n    }\n    if (over_31 >= 2 || over_12 === 3 || under_1 >= 2) {\n      return;\n    }\n    possible_year_splits = [[ints[2], ints.slice(0, 2)], [ints[0], ints.slice(1, 3)]];\n    for (p = 0, len2 = possible_year_splits.length; p < len2; p++) {\n      ref = possible_year_splits[p], y = ref[0], rest = ref[1];\n      if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n        dm = this.map_ints_to_dm(rest);\n        if (dm != null) {\n          return {\n            year: y,\n            month: dm.month,\n            day: dm.day\n          };\n        } else {\n          return;\n        }\n      }\n    }\n    for (q = 0, len3 = possible_year_splits.length; q < len3; q++) {\n      ref1 = possible_year_splits[q], y = ref1[0], rest = ref1[1];\n      dm = this.map_ints_to_dm(rest);\n      if (dm != null) {\n        y = this.two_to_four_digit_year(y);\n        return {\n          year: y,\n          month: dm.month,\n          day: dm.day\n        };\n      }\n    }\n  },\n  map_ints_to_dm: function map_ints_to_dm(ints) {\n    var d, len1, m, o, ref, ref1;\n    ref = [ints, ints.slice().reverse()];\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      ref1 = ref[o], d = ref1[0], m = ref1[1];\n      if (1 <= d && d <= 31 && 1 <= m && m <= 12) {\n        return {\n          day: d,\n          month: m\n        };\n      }\n    }\n  },\n  two_to_four_digit_year: function two_to_four_digit_year(year) {\n    if (year > 99) {\n      return year;\n    } else if (year > 50) {\n      return year + 1900;\n    } else {\n      return year + 2000;\n    }\n  }\n};\nmodule.exports = matching;","map":{"version":3,"mappings":"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","names":["frequency_lists","require","adjacency_graphs","scoring","build_ranked_dict","ordered_list","result","i","RANKED_DICTIONARIES","lst","GRAPHS","qwerty","dvorak","keypad","mac_keypad","L33T_TABLE","a","b","c","e","g","l","o","s","t","x","z","REGEXEN","recent_year","DATE_MAX_YEAR","DATE_MIN_YEAR","DATE_SPLITS","matching","empty","obj","results","k","length","extend","lst2","push","apply","translate","string","chr_map","ref","chr","join","mod","n","m","sorted","matches","sort","m1","m2","j","omnimatch","password","matchers","matcher","call","dictionary_match","_ranked_dictionaries","len","password_lower","toLowerCase","ranked_dict","word","rank","pattern","token","matched_word","dictionary_name","reversed","l33t","reverse_dictionary_match","reversed_password","split","reverse","match","set_user_input_dictionary","slice","relevant_l33t_subtable","table","password_chars","subtable","relevant_subs","p","sub","enumerate_l33t_subs","keys","subs","dedup","deduped","members","assoc","v","label","helper","first_key","rest_keys","next_subs","dup_l33t_index","l33t_chr","sub_extension","concat","sub_alternative","splice","sub_dicts","sub_dict","l33t_match","_l33t_table","subbed_password","ref1","match_sub","indexOf","subbed_chr","sub_display","filter","spatial_match","_graphs","graph","graph_name","SHIFTED_RX","spatial_match_helper","last_direction","turns","exec","charAt","shifted_count","prev_char","found","found_direction","cur_direction","adjacents","cur_char","adj","repeat_match","greedy","lazy","lazy_anchored","lastIndex","greedy_match","lazy_match","base_token","index","base_analysis","most_guessable_match_sequence","base_matches","sequence","base_guesses","guesses","repeat_count","MAX_DELTA","sequence_match","update","delta","Math","abs","_this","test","sequence_name","sequence_space","ascending","last_delta","charCodeAt","regex_match","_regexen","regex","rx_match","regex_name","name","date_match","maybe_date_no_separator","maybe_date_with_separator","candidates","ref3","dmy","parseInt","best_candidate","metric","candidate","year","REFERENCE_YEAR","min_distance","ref5","distance","ref6","separator","month","day","is_submatch","other_match","map_ints_to_dmy","ints","over_12","over_31","under_1","int","possible_year_splits","y","rest","dm","map_ints_to_dm","d","two_to_four_digit_year","module","exports"],"sourceRoot":"..","sources":["src/matching.coffee"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}