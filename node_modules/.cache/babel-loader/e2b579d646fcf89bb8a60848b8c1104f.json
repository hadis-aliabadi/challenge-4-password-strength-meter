{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar feedback, scoring;\nscoring = require('./scoring');\nfeedback = {\n  default_feedback: {\n    warning: '',\n    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n  },\n  get_feedback: function get_feedback(score, sequence) {\n    var extra_feedback, i, len, longest_match, match, ref;\n    if (sequence.length === 0) {\n      return this.default_feedback;\n    }\n    if (score > 2) {\n      return {\n        warning: '',\n        suggestions: []\n      };\n    }\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = 'Add another word or two. Uncommon words are better.';\n    if (feedback != null) {\n      feedback.suggestions.unshift(extra_feedback);\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extra_feedback]\n      };\n    }\n    return feedback;\n  },\n  get_match_feedback: function get_match_feedback(match, is_sole_match) {\n    var layout, warning;\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n      case 'spatial':\n        layout = match.graph.toUpperCase();\n        warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n        return {\n          warning: warning,\n          suggestions: ['Use a longer keyboard pattern with more turns']\n        };\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n        return {\n          warning: warning,\n          suggestions: ['Avoid repeated words and characters']\n        };\n      case 'sequence':\n        return {\n          warning: \"Sequences like abc or 6543 are easy to guess\",\n          suggestions: ['Avoid sequences']\n        };\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: \"Recent years are easy to guess\",\n            suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n          };\n        }\n        break;\n      case 'date':\n        return {\n          warning: \"Dates are often easy to guess\",\n          suggestions: ['Avoid dates and years that are associated with you']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function get_dictionary_match_feedback(match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n    suggestions = [];\n    word = match.token;\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push(\"Capitalization doesn't help very much\");\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n    }\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push(\"Reversed words aren't much harder to guess\");\n    }\n    if (match.l33t) {\n      suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n    }\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  }\n};\nmodule.exports = feedback;","map":{"version":3,"mappings":"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","names":["scoring","require","feedback","default_feedback","warning","suggestions","get_feedback","score","sequence","length","longest_match","ref","match","token","extra_feedback","unshift","get_match_feedback","is_sole_match","pattern","layout","graph","toUpperCase","turns","base_token","regex_name","get_dictionary_match_feedback","dictionary_name","l33t","reversed","rank","guesses_log10","word","START_UPPER","push","ALL_UPPER","toLowerCase","result","module","exports"],"sourceRoot":"..","sources":["src/feedback.coffee"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}